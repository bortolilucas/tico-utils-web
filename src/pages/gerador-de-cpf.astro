---
import { actions } from "astro:actions";

import ContentCopyIcon from "@/assets/icons/copy.svg";
import GenerateIcon from "@/assets/icons/generate.svg";
import Button from "@/components/Button.astro";
import Card from "@/components/Card.astro";
import ErrorMessage from "@/components/ErrorMessage.astro";
import Select from "@/components/Select.astro";
import SelectOptions from "@/components/SelectOptions.astro";
import { ufOptions, yesOrNoOptions } from "@/data/selectOptions.ts";
import MainLayout from "@/layout/MainLayout.astro";
import { isActionError, isInputError } from "astro:actions";

export const prerender = false;

const result = Astro.getActionResult(actions.generateCpf);
const inputErrors = isInputError(result?.error) ? result.error.fields : {};
const actionError = isActionError(result?.error) ? result.error.message : null;
---

<MainLayout enableClientRouter>
  <Card>
    <h2 class="text-3xl font-bold text-gray-900 mb-2">Gerador de CPF</h2>
    <p class="text-gray-600 mb-8">
      Gere um CPF válido com um clique. Escolha se deseja incluir os "pontos" ou
      não.
    </p>

    <form
      id="generateCpfForm"
      method="POST"
      action={actions.generateCpf}
      class="max-w-4xl"
    >
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
        <SelectOptions
          transition:persist
          label="Pontuação? (Ex: 123.456.789-09)"
          name="punctuation"
          options={yesOrNoOptions}
          error={inputErrors.punctuation?.[0]}
          defaultValue={result?.data?.formData.punctuation ??
            yesOrNoOptions[0].value}
        />

        <Select
          transition:persist
          label="Estado de Origem do CPF"
          name="state"
          options={ufOptions}
          error={inputErrors.state?.[0]}
          defaultValue={result?.data?.formData.state ?? ufOptions[0].value}
        />
      </div>

      {actionError && <ErrorMessage>{actionError}</ErrorMessage>}

      <Button type="submit" class="w-full">
        <GenerateIcon />
        GERAR CPF
      </Button>
    </form>

    {
      result?.data?.cpf && (
        <div class="grid grid-cols-1 max-w-4xl mt-8 md:grid-cols-2 gap-8">
          <div>
            <label
              class="block text-sm font-medium text-gray-700 mb-2"
              for="generated-cpf"
            >
              Generated CPF
            </label>
            <div class="relative">
              <p
                class="w-full bg-gray-100 border-gray-300 rounded-lg py-3 px-4 text-gray-800 text-lg"
                id="generated-cpf"
              >
                {result.data.cpf}
              </p>
              <button
                type="button"
                id="copyButton"
                class="absolute group cursor-pointer right-2 top-1/2 -translate-y-1/2 p-2 text-gray-500 hover:text-gray-700"
              >
                <ContentCopyIcon class="w-6" />
              </button>
            </div>
          </div>

          <div class="flex items-center justify-center">
            <img
              alt="Advertisement for personalized email"
              class="rounded-lg"
              src="https://lh3.googleusercontent.com/aida-public/AB6AXuBjJwj1qw_3liK2YaUYpNoh3n5oFkl6PnoSVdJ7qu0c7DRkbQowEjWRs4cHPpG0cwOAYHovaaaBIV7qzxPTKJLHeecmkId04FW5OYNx-yCR1NhgLCH7xXQJthEn78sB8qKy3O6w9pku-xwmoAFJ_CtS5xqflGiNnRWiT1hoNlV9d1acoZR-oPvCxZ26UrO9vb4Lo7-HszIBepkZlacNv-zifqSHFwcgJK3sdQhCf-x8_jsctPFJenl6TIM3vx5oxvQfiCK8CY_ma8k"
            />
          </div>
        </div>
      )
    }
  </Card>
</MainLayout>

<script>
  import { copyToClipboard } from "@/utils/clipboard";
  import { handleFormSubmit } from "@/utils/forms";

  document.addEventListener("astro:page-load", () => {
    handleFormSubmit("generateCpfForm");
    copyToClipboard(
      document.getElementById("generated-cpf")!.textContent,
      document.getElementById("copyButton")!,
      "CPF copiado!",
      "Clique para copiar"
    );
  });
</script>
